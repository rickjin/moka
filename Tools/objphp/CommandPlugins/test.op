<?php
/*
 * test.op
 *
 * This file is part of Objective-PHP <http://www.atimport.net/>.
 *
 * Copyright (c) 2009-2011, Stephen Paul Ierodiaconou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Stephen Ierodiaconou nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// This implements our unit test plugin
// Example Usage: ./objphp test Tests/Objective-PHP/Protocol.op <optional test method>

// This protocol must be implemented by objects>?
@protocol ITestable
- (bool)runTests;
- (bool)runTest:name;
@end

const MKUnitTestAssertFailed = "MKUnitTestAssertFailed";
const MKUnitTestUndefinedMessage = "<anonymous>";

// All tests inherit this
@implementation UnitTest : MKObject <ITestable>

- (bool)runTests
{
    MKLog(">Begin tests '".[$self name]."'");

    try
    {
        // First attempt to call -setUp
        if (array_key_exists(@selector(setUp), $self->isa->dispatchTable))
        {
            MKLog(">Begin setup of tests:");
            \ObjPHP\objphp_msgSend( $self, @selector(setUp), array());
            MKLog(">Success");
        }

        // call each method that has 'test' in the name
        foreach($self->isa->dispatchTable as $methodName => $method)
        {
            if (strpos($methodName, @selector(test)) !== 0)
                continue;
            MKLog(">>Method '".\ObjPHP\selectorFromMethodName($methodName)."': ");
            \ObjPHP\objphp_msgSend( $self, $methodName, array());
            MKLog(">>Success");
        }
    }
    catch(\ObjPHP\ParseException $e)
    {
        MKLog(">Failed\n---\n".$e->getFormattedError());
    }
    catch(\ObjPHP\CountableException $e)
    {
        MKLog(">Failed\n---\n".$e->getMessage());
    }
    // If -shutdown exists call now
    if (array_key_exists(@selector(shutDown), $self->isa->dispatchTable))
    {
        try
        {
            MKLog(">Start shutdown of tests:");
            \ObjPHP\objphp_msgSend( $self, @selector(shutDown), array());
            MKLog(">Success");
        }
        catch(\ObjPHP\ParseException $e)
        {
            MKLog(">Failed\n---\n".$e->getFormattedError());
        }
        catch(\ObjPHP\CountableException $e)
        {
            MKLog(">Failed\n---\n".$e->getMessage());
        }
    }
}

- (bool)runTest:name
{

    $methodName = \ObjPHP\methodNameFromSelector('test'.$name);
    if (array_key_exists($methodName, $self->isa->dispatchTable))
    {
        MKLog(">Begin ".[$self name]);

        try
        {
            MKLog(">>Method 'test".$name."': ");
            \ObjPHP\objphp_msgSend( $self, $methodName, array());
            MKLog(">>Success");
        }
        catch(\ObjPHP\ParseException $e)
        {
            MKLog(">Failed\n---\n".$e->getFormattedError());
        }
        catch(\ObjPHP\CountableException $e)
        {
            MKLog(">Failed\n---\n".$e->getMessage());
        }
    }
    else
    {
        MKLog(">Failed\n---\nMethod with name 'test$name' not found in '".[$self name]."'.");
    }

}

- (bool)assertTrue:test
{
    [$self assertTrue:$test message:MKUnitTestUndefinedMessage];
}

- (bool)assertTrue:test message:(string)message
{
    if ($test === YES)
        return YES;
    else
        [MKException raise:MKUnitTestAssertFailed reason:("Assert '$message' failed: Expected 'true', test value was '$test'")];
}

- (bool)assertFalse:test
{
    [$self assertFalse:$test message:MKUnitTestUndefinedMessage];
}

- (bool)assertFalse:test message:(string)message
{
    if ($test === NO)
        return YES;
    else
        [MKException raise:MKUnitTestAssertFailed reason:("Assert '$message' failed: Expected 'false', test value was '$test'")];
}

- (bool)assertNotTrue:test
{
    [$self assertNotTrue:$test message:MKUnitTestUndefinedMessage];
}

- (bool)assertNotTrue:test message:(string)message
{
    if ($test !== YES)
        return YES;
    else
        [MKException raise:MKUnitTestAssertFailed reason:("Assert '$message' failed: Expected 'not true', test value was '$test'")];
}

- (bool)assertNotFalse:test
{
    [$self assertNotFalse:$test message:MKUnitTestUndefinedMessage];
}

- (bool)assertNotFalse:test message:(string)message
{
    if ($test !== NO)
        return YES;
    else
        [MKException raise:MKUnitTestAssertFailed reason:("Assert '$message' failed: Expected 'not false', test value was '$test'")];
}

- (bool)assert:test1 equals:test2
{
    return [$self assert:$test1 equals:$test2 message:MKUnitTestUndefinedMessage];
}

- (bool)assert:test1 equals:test2 message:(string)message
{
    if ($test1 === $test2)
        return YES;
    else
        [MKException raise:MKUnitTestAssertFailed reason:("Assert '$message' failed: Expected '$test2' but was '$test1'")];
}

- (bool)assertThrows:(function)anonfunc
{
    return [$self assertThrows:$anonfunc message:MKUnitTestUndefinedMessage];
}

- (bool)assertThrows:(function)anonfunc message:(string)message
{
    try
    {
        $anonfunc();
    }
    catch(Exception $e)
    {
        return YES;
    }

    [MKException raise:MKUnitTestAssertFailed reason:("Assert '$message' failed: Expected 'exception' but no exception was caught.")];
}

- (bool)assertDoesNotThrow:(function)anonfunc
{
    return [$self assertThrows:$anonfunc message:MKUnitTestUndefinedMessage];
}

- (bool)assertDoesNotThrow:(function)anonfunc message:(string)message
{
    try
    {
        $retval = $anonfunc();
    }
    catch(\ObjPHP\ParseException $e)
    {
        [MKException raise:MKUnitTestAssertFailed reason:("Assert '$message' failed: Expected 'no exception' but caught exception of type 'ParseException': ".$e->getFormattedError())];
    }
    catch(\ObjPHP\CountableException $e)
    {
        [MKException raise:MKUnitTestAssertFailed reason:("Assert '$message' failed: Expected 'no exception' but caught exception of type 'CountableException': ".$e->getMessage())];
    }
    catch(Exception $e)
    {
        [MKException raise:MKUnitTestAssertFailed reason:("Assert '$message' failed: Expected 'no exception' but caught exception of type 'Exception': ".$e->getMessage())];
    }
    return $retval;
}

@end

// the test plugin
@implementation test : MKObject <ICommandPlugin>

- (void)help
{
?>
    format: test <Options> <FileToTest> <OptionalFunctionName>
        Options:
            -v, --verbose: Enable verbose output
            -s, --silent: Silence output
<?php
}

- (void)doWithParameters:(MKDictionary)params
{
    $op_mode = 1;
    // parse args
    if ([$params count])
    {
        // 0 is command name
        foreach ([$params _PHParray] as $argname => $argval)
        {
            if ($argname === 1)
            {
                $filename = $argval;
                continue;
            }
            else if ($argname === 2)
            {
                $funcname = $argval;
                continue;
            }

            if ($argname === 's' || $argname === 'silent')
            {
                $op_mode = 0;
                MKLog("Output Silenced");
            }
            else if ($argname === 'v' || $argname === 'verbose')
            {
                MKLog("Verbose output enabled");
                $op_mode = 2;
            }
        }

        try
        {
            // check that test file exists
            $info = new SplFileInfo($filename);
            if (!$info->isFile() && !$info->isLink() )
                throw new \ObjPHP\CountableException("File under test '$filename' could not be found.");

            @import $filename

            $className = $info->getbaseName('.op'); // CHANGE TO .op

            $opName = '_opClass_'.$className;

            $IUT = [[$opName::getInstance() alloc] init];

            if (isset($funcname))
                [$IUT runTest:$funcname];
            else
                [$IUT runTests];

        }
        catch( ObjPHP\CountableException $e )
        {
            MKLog("Exception thrown by test framework: ".$e->getMessage());
        }
    }
}

@end

[$self addPlugin:[[test alloc] init] withName:"test"];


<?php
/*
 * MKArray.op
 *
 * Copyright 2009, 2010 Stephen Paul Ierodiaconou
 *
 * This file is part of Moka/Objective-PHP <http://www.atimport.net/>.
 *
 * Portions based on CPArray.j (12/04/2010) in Cappuccino (http://www.cappuccino.org/)
 *
 * Moka/Objective-PHP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Moka/Objective-PHP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Moka/Objective-PHP.  If not, see <http://www.gnu.org/licenses/>.
 */

@import <Foundation/MKObject.op>
@import <Foundation/MKRange.op>
@import <Foundation/MKObjPHPRuntime.op>
@import <Foundation/MKException.op>

const MKBinarySearchingFirstEqual       = 0,
      MKBinarySearchingLastEqual        = 1,
      MKBinarySearchingInsertionIndex   = 2;

@implementation MKArray : MKObject
{
    @protected _array = array();
}

//Creates and returns an empty array.
+ (id)array
{
    return [[$this alloc] init];
}

//Creates and returns an array containing the objects in another given array.
+ (id)arrayWithArray:(MKArray *)anArray
{
    return [[$this alloc] initWithArray:$anArray];
}

+ (id)arrayWithPHPArray:(array)anArray
{
    return [[$this alloc] initWithPHPArray:$anArray];
}

//Creates and returns an array containing the contents of the file specified by a given path.
+ (id)arrayWithContentsOfFile:(MKString *)aPath
{
    throw new NotImplementedException($_cmd);
}

//Creates and returns an array containing the contents specified by a given URL.
+ (id)arrayWithContentsOfURL:(MKURL *)aURL
{
    throw new NotImplementedException($_cmd);
}

//Creates and returns an array containing a given object.
+ (id)arrayWithObject:(id)anObject
{
    return [[$this alloc] initWithObjects:$anObject count:1];
}

/* VAR ARGS NOT SUPPORTED YET
//Creates and returns an array containing the objects in the argument list.
+ (id)arrayWithObjects:(id)firstObj, ...
{
}
*/

//Creates and returns an array that includes a given number of objects from a given C array.
+ (id)arrayWithObjects:(const id *)objects count:(uint)count
{
    return [[$this alloc] initWithPHPArray:$objects count:$count];
}

//Returns a new array that is a copy of the receiver with a given object added to the end.
- (MKArray *)arrayByAddingObject:(id)anObject
{
    if ($anObject === nil )
        [MKException raise:MKInvalidArgumentException 
                     reason:"arrayByAddingObject: object can't be nil"];

    $arr = [$self copy];
    [$arr addObject:$anObject];
    return $arr;
}

//Returns a new array that is a copy of the receiver with the objects contained in another array added to the end.
- (MKArray *)arrayByAddingObjectsFromArray:(MKArray *)otherArray
{
    $arr = [$self copy];
    [$arr addObjectsFromArray:$otherArray];
    return $arr;
}

//Constructs and returns an MKString object that is the result of interposing a given separator between the elements of the receiver’s array.
- (MKString *)componentsJoinedByString:(MKString *)separator
{
    $desc = array();
    foreach ($self->_array as $object)
    {
        if (isset($object->isa))
            $desc[] = [$object description];
        else
        {
            if (is_object($object))
                $desc[] = "aPHPObject";            
            else if (is_null($object))
                $desc[] = "null";
            else
                $desc[] = "".$object;
        }
    }
    return implode([$separator description], $desc);

}

//Returns a Boolean value that indicates whether a given object is present in the receiver.
- (BOOL)containsObject:(id)anObject
{
    return [$self indexOfObject:$anObject] != MKNotFound;
}

//Returns the number of objects currently in the receiver.
- (uint)count
{
    return count($self->_array);
}

//Returns a string that represents the contents of the receiver, formatted as a property list.
- (MKString *)description
{
    // FIXME: not a plist
    return [$self componentsJoinedByString:[MKString stringWithString:","]];
}

//Returns a string that represents the contents of the receiver, formatted as a property list.
- (MKString *)descriptionWithLocale:(id)locale
{
    // TODO: not fully implemented
    return [$self description];
}

//Returns a string that represents the contents of the receiver, formatted as a property list.
- (MKString *)descriptionWithLocale:(id)locale indent:(uint)level
{
    // TODO: not fully implemented
    return [$self description];
}

//Executes a given block using the objects in the receiver at the specified indexes.
- (void)enumerateObjectsAtIndexes:(MKIndexSet *)indexSet options:(MKEnumerationOptions)opts usingBlock:(void /*(^)(id obj, uint idx, BOOL *stop)*/)block
{
    throw new NotImplementedException($_cmd);
}

//Executes a given block using each object in the receiver, starting with the first object and continuing through the array to the last object.
- (void)enumerateObjectsUsingBlock:(void /*(^)(id obj, uint idx, BOOL *stop)*/)block
{
    throw new NotImplementedException($_cmd);
}

//Executes a given block using each object in the receiver.
- (void)enumerateObjectsWithOptions:(MKEnumerationOptions)opts usingBlock:(void /*(^)(id obj, uint idx, BOOL *stop)*/)block
{
    throw new NotImplementedException($_cmd);
}

//Copies the objects contained in the receiver that fall within the specified range to aBuffer.
- (void)getObjects:(id *)aBuffer range:(MKRange)aRange
{
    throw new NotImplementedException($_cmd);
}

//Returns the indexes, from a given set of indexes, of objects in the receiver that pass a test in a given Block for a given set of enumeration options.
- (MKIndexSet *)indexesOfObjectsAtIndexes:(MKIndexSet *)indexSet options:(MKEnumerationOptions)opts passingTest:(BOOL /*(^)(id obj, uint idx, BOOL *stop)*/)predicate
{
    throw new NotImplementedException($_cmd);
}

//Returns the indexes of objects in the receiver that pass a test in a given Block.
- (MKIndexSet *)indexesOfObjectsPassingTest:(BOOL /*(^)(id obj, uint idx, BOOL *stop)*/)predicate
{
    throw new NotImplementedException($_cmd);
}

//Returns the indexes of objects in the receiver that pass a test in a given Block for a given set of enumeration options.
- (MKIndexSet *)indexesOfObjectsWithOptions:(MKEnumerationOptions)opts passingTest:(BOOL /*(^)(id obj, uint idx, BOOL *stop)*/)predicate
{
    throw new NotImplementedException($_cmd);
}

// TODO: Check these actually return correct results (== vs ===)
//Returns the lowest index whose corresponding array value is equal to a given object.
- (uint)indexOfObject:(id)anObject
{
    if ($anObject === nil)
        return CPNotFound;

    $count = count($self->_array);

    for ($i = 0; $i < $count; ++$i)
        if (is_object($self->_array[$i]) && isset($self->_array[$i]->isa))
        {
            if ([$self->_array[$i] isEqual:$anObject])
                return $i;
        }
        else
        {
            if ($self->_array[$i] === $anObject)
                return $i;
        }

    return MKNotFound;
}

// TODO: Check these actually return correct results (== vs ===)
//Returns the lowest index within a specified range whose corresponding array value is equal to a given object .
- (uint)indexOfObject:(id)anObject inRange:(MKRange)aRange
{
    if ($anObject === nil)
        return CPNotFound;

    $count = min(MKMaxRange($aRange), count($self->_array));

    for ($i = $aRange->location; $i < $count; ++$i)
        if (is_object($self->_array[$i]) && isset($self->_array[$i]->isa))
        {
            if ([$self->_array[$i] isEqual:$anObject])
                return $i;
        }
        else
        {
            if ($self->_array[$i] === $anObject)
                return $i;
        }

    return MKNotFound;
}

//Returns the index, within a specified range, of an object compared with elements in the receiver using a given MKComparator block.
- (uint)indexOfObject:(id)obj inSortedRange:(MKRange)r options:(MKBinarySearchingOptions)opts usingComparator:(MKComparator)cmp
{
    throw new NotImplementedException($_cmd);
}

//Returns the index, from a given set of indexes, of the first object in the receiver that passes a test in a given Block for a given set of enumeration options.
- (uint)indexOfObjectAtIndexes:(MKIndexSet *)indexSet options:(MKEnumerationOptions)opts passingTest:(BOOL /*(^)(id obj, uint idx, BOOL *stop)*/)predicate
{
    throw new NotImplementedException($_cmd);
}

// TODO: Check these actually return correct results (== vs ===)
//Returns the lowest index whose corresponding array value is identical to a given object.
- (uint)indexOfObjectIdenticalTo:(id)anObject
{
    if ($anObject === nil)
        return CPNotFound;

    $count = count($self->_array);

    for ($i = 0; $i < $count; ++$i)
        if ($self->_array[$i] === $anObject)
            return $i;

    return MKNotFound;
}

// TODO: Check these actually return correct results (== vs ===)
//Returns the lowest index within a specified range whose corresponding array value is equal to a given object .
- (uint)indexOfObjectIdenticalTo:(id)anObject inRange:(MKRange)aRange
{
    if ($anObject === nil)
        return CPNotFound;

    $count = min(MKMaxRange($aRange), count($self->_array));

    for ($i = $aRange->location; $i < $count; ++$i)
        if ($self->_array[$i] === $anObject)
            return $i;

    return MKNotFound;
}

//Returns the index of the first object in the receiver that passes a test in a given Block.
- (uint)indexOfObjectPassingTest:(BOOL /*(^)(id obj, uint idx, BOOL *stop)*/)predicate
{
    throw new NotImplementedException($_cmd);
}

//Returns the index of the first object in the receiver that passes a test in a given Block for a given set of enumeration options.
- (uint)indexOfObjectWithOptions:(MKEnumerationOptions)opts passingTest:(BOOL /*(^)(id obj, uint idx, BOOL *stop)*/)predicate
{
    throw new NotImplementedException($_cmd);
}

- (array)PHParray
{
    return $self->_array;
}

- (id)init
{
    if ($self = [super init])
    {
    }
    return $self;
}

- (id)initWithPHPArray:(PHPArray)ar
{
    if ($self = [super init])
    {
        $self->_array = $ar;
    }
    return $self;
}

- (id)initWithPHPArray:(PHPArray)ar count:cnt
{
    if ($self = [super init])
    {
        $self->_array = array_slice($ar, 0, $cnt);
    }
    return $self;
}

//Initializes a newly allocated array by placing in it the objects contained in a given array.
- (id)initWithArray:(MKArray *)anArray
{
    return [$self initWithPHPArray:[$anArray PHParray]];
}

//Initializes a newly allocated array using anArray as the source of data objects for the array.
- (id)initWithArray:(MKArray *)anArray copyItems:(BOOL)flag
{
    if (!flag)
        return [$self initWithArray:$anArray];

    $self = [super init];

    if ($self)
    {
        $count = [$anArray count];

        for($index = 0; $index < $count; ++$index)
        {
            // Do a deep/shallow copy?
            if (is_object($anArray[$index]) && isset($anArray[$index]->isa))
                $self->_array[$index] = [$anArray[$index] copy];
            else
                $self->_array[$index] = $anArray[$index];
        }
    }
}

//Initializes a newly allocated array with the contents of the file specified by a given path.
- (id)initWithContentsOfFile:(MKString *)aPath
{
    throw new NotImplementedException($_cmd);
}

//Initializes a newly allocated array with the contents of the location specified by a given URL.
- (id)initWithContentsOfURL:(MKURL *)aURL
{
    throw new NotImplementedException($_cmd);
}

/*
Initializes a newly allocated array by placing in it the objects in the argument list.
- (id)initWithObjects:(id)firstObj, ...
{
}
*/

//Initializes a newly allocated array to include a given number of objects from a given C array.
- (id)initWithObjects:(const id *)objects count:(uint)count
{
    if (is_array(objects))
        return [$self initWithPHPArray:$objects count:$count];
    else
        return [$self initWithPHPArray:array($objects) count:$count];
}

//Compares the receiving array to another array.
- (BOOL)isEqualToArray:(MKArray *)otherArray
{
    return (count(array_diff($self->_array, [$otherArray PHParray])))?(YES):(NO);
}

//Returns the object in the array with the highest index value.
- (id)lastObject
{
    $count = count($self->_array);

    if (!$count) return nil;

    return $self->_array[$count - 1];
}

//Sends to each object in the receiver the message identified by a given selector, starting with the first object and continuing through the array to the last object.
- (void)makeObjectsPerformSelector:(SEL)aSelector
{
    if (count($self->_array))
        foreach ($self->_array as $obj)
            \ObjPHP\objphp_msgSend($obj, $aSelector, array());
}

//Sends the aSelector message to each object in the array, starting with the first object and continuing through the array to the last object.
- (void)makeObjectsPerformSelector:(SEL)aSelector withObject:(id)anObject
{
    if (count($self->_array))
        foreach ($self->_array as $obj)
            \ObjPHP\objphp_msgSend($obj, $aSelector, array($anObject));
}

//Returns the object located at index.
- (id)objectAtIndex:(uint)index
{
    if ($index >= count($self->_array) || $index < 0)
        [MKException raise:MKRangeException reason:("index ($index) is beyond array bounds (".count($self->_array).")")];

    return $self->_array[$index];
}

//Returns an enumerator object that lets you access each object in the receiver.
- (MKEnumerator *)objectEnumerator
{
    throw new NotImplementedException($_cmd);
}

//Returns an array containing the objects in the receiver at the indexes specified by a given index set.
- (MKArray *)objectsAtIndexes:(MKIndexSet *)indexes
{
    throw new NotImplementedException($_cmd);
}

//Returns an enumerator object that lets you access each object in the receiver, in reverse order.
- (MKEnumerator *)reverseObjectEnumerator
{
    throw new NotImplementedException($_cmd);
}

//Analyzes the receiver and returns a “hint” that speeds the sorting of the array when the hint is supplied to sortedArrayUsingFunction:context:hint: (page 50).
- (MKData *)sortedArrayHint
{
    throw new NotImplementedException($_cmd);
}

//Returns an array that lists the receiver’s elements in ascending order, as determined by the comparison method specified by a given MKComparator Block.
- (MKArray *)sortedArrayUsingComparator:(MKComparator)cmptr
{
    throw new NotImplementedException($_cmd);
}

//Returns a new array that lists the receiver’s elements in ascending order as defined by the comparison function comparator.
- (MKArray *)sortedArrayUsingFunction:(func/*MKInteger (*)(id, id, void *)*/)comparator context:(void *)context
{
    throw new NotImplementedException($_cmd);
}

//Returns a new array that lists the receiver’s elements in ascending order as defined by the comparison function comparator.
- (MKArray *)sortedArrayUsingFunction:(func/*MKInteger (*)(id, id, void *)*/)comparator context:(void *)context hint:(MKData *)hint
{
    throw new NotImplementedException($_cmd);
}

//Returns an array that lists the receiver’s elements in ascending order, as determined by the comparison method specified by a given selector.
- (MKArray *)sortedArrayUsingSelector:(SEL)comparator
{
    throw new NotImplementedException($_cmd);
}

//Returns an array that lists the receiver’s elements in ascending order, as determined by the comparison method specified by a given MKComparator Block.
- (MKArray *)sortedArrayWithOptions:(MKSortOptions)opts usingComparator:(MKComparator)cmptr
{
    throw new NotImplementedException($_cmd);
}

//Returns a new array containing the receiver’s elements that fall within the limits specified by a given range.
- (MKArray *)subarrayWithRange:(MKRange)range
{
    throw new NotImplementedException($_cmd);
}

//Writes the contents of the receiver to a file at a given path.
- (BOOL)writeToFile:(MKString *)path atomically:(BOOL)flag
{
    throw new NotImplementedException($_cmd);
}

//Writes the contents of the receiver to the location specified by a given URL.
- (BOOL)writeToURL:(MKURL *)aURL atomically:(BOOL)flag
{
    throw new NotImplementedException($_cmd);
}

// Mutable methods

//Creates and returns an NSMutableArray object with enough allocated memory to initially hold a given number of objects.
+ (id)arrayWithCapacity:(int)numItems
{
    return [[$self alloc] initWithCapacity:$numItems];
}

//Inserts a given object at the end of the receiver.
- (void)addObject:(id)anObject
{
    $self->_array[] = $anObject;
}

//Adds the objects contained in another given array to the end of the receiver’s content.
- (void)addObjectsFromArray:(MKArray)otherArray
{
    foreach([$otherArray PHPArray] as $obj)
        $self->_array[] = $obj;
}

- (void)addObjectsFromPHPArray:(array)otherArray
{   
    foreach($otherArray as $obj)
        $self->_array[] = $obj;
}

//Exchanges the objects in the receiver at given indices.
- (void)exchangeObjectAtIndex:(int)idx1 withObjectAtIndex:(int)idx2
{
    $temp = $self->_array[$idx1];
    $self->_array[$idx1] = $self->_array[$idx2];
    $self->_array[$idx2] = $temp;
}
    
//Evaluates a given predicate against the receiver’s content and leaves only objects that match
- (void)filterUsingPredicate:(NSPredicate *)predicate
{
    throw new NotImplementedException($_cmd);
}

//Returns an array, initialized with enough memory to initially hold a given number of objects.
- (id)initWithCapacity:(int)numItems
{
    return $self;
}

//Inserts a given object into the receiver's contents at a given index.
- (void)insertObject:(id)anObject atIndex:(int)index
{
    $arr = array_slice($self->_array, 0, $index);
    $arr[] = $anObject;
 
    $self->_array = array_merge($arr, array_slice($self->_array, $index));
}

//Inserts the objects in in a given array into the receiver at the specified indexes.
- (void)insertObjects:(MKArray)objects atIndexes:(MKIndexSet)indexes
{
    $indexesCount = [$indexes count];
    $objectsCount = [$objects count];
    
    if ($indexesCount !== $objectsCount)
        [MKException raise:MKRangeException reason:"the counts of the passed-in array ($objectsCount) and index set ($indexesCount) must be identical."];
    
    $lastIndex = [$indexes lastIndex];
    
    if ($lastIndex >= [$self count] + $indexesCount)
        [MKException raise:MKRangeException reason:"the last index ($lastIndex) must be less than the sum of the original count (".[$self count].") and the insertion count ($indexesCount)."];    
    
    $currentIndex = [$indexes firstIndex];
 
    for ($index = 0; $index < $objectsCount; ++$index, $currentIndex = [$indexes indexGreaterThanIndex:$currentIndex])
        [$self insertObject:$objects[$index] atIndex:$currentIndex];
}

//Empties the receiver of all its elements.
- (void)removeAllObjects
{
    $self->_array = array();
}

//Removes the object with the highest-valued index in the receiver
- (void)removeLastObject
{
    throw new NotImplementedException($_cmd);
}

//Removes all occurrences in the receiver of a given object.
- (void)removeObject:(id)anObject
{
    throw new NotImplementedException($_cmd);
}

//Removes all occurrences within a specified range in the receiver of a given object.
- (void)removeObject:(id)anObject inRange:(NSRange)aRange
{
    throw new NotImplementedException($_cmd);
}

//Removes the object at index .
- (void)removeObjectAtIndex:(NSUInteger)index
{
    throw new NotImplementedException($_cmd);
}

//Removes all occurrences of a given object in the receiver.
- (void)removeObjectIdenticalTo:(id)anObject
{
    throw new NotImplementedException($_cmd);
}

//Removes all occurrences of anObject within the specified range in the receiver.
- (void)removeObjectIdenticalTo:(id)anObject inRange:(NSRange)aRange
{
    throw new NotImplementedException($_cmd);
}

//Removes the objects at the specified indexes from the receiver.
- (void)removeObjectsAtIndexes:(NSIndexSet *)indexes
{
    throw new NotImplementedException($_cmd);
}

//Removes from the receiver the objects in another given array.
- (void)removeObjectsInArray:(NSArray *)otherArray
{
    throw new NotImplementedException($_cmd);
}

//Removes from the receiver each of the objects within a given range.
- (void)removeObjectsInRange:(NSRange)aRange
{
    throw new NotImplementedException($_cmd);
}

//Replaces the object at index with anObject.
- (void)replaceObjectAtIndex:(NSUInteger)index withObject:(id)anObject
{
    throw new NotImplementedException($_cmd);
}

//Replaces the objects in the receiver at specified locations specified with the objects from a given array.
- (void)replaceObjectsAtIndexes:(NSIndexSet *)indexes withObjects:(NSArray *)objects
{
    throw new NotImplementedException($_cmd);
}

//Replaces the objects in the receiver specified by a given range with all of the objects from a given array.
- (void)replaceObjectsInRange:(NSRange)aRange withObjectsFromArray:(NSArray *)otherArray
{
    throw new NotImplementedException($_cmd);
}

//Replaces the objects in the receiver specified by one given range with the objects in another array specified by another range.
- (void)replaceObjectsInRange:(NSRange)aRange withObjectsFromArray:(NSArray *)otherArray range:(NSRange)otherRange
{
    throw new NotImplementedException($_cmd);
}

//Sets the receiver’s elements to those in another given array.
- (void)setArray:(NSArray *)otherArray
{
    throw new NotImplementedException($_cmd);
}

//Sorts the receiver using the comparison method specified by a given NSComparator Block.
- (void)sortUsingComparator:(NSComparator)cmptr
{
    throw new NotImplementedException($_cmd);
}

//Sorts the receiver using a given array of sort descriptors.
- (void)sortUsingDescriptors:(NSArray *)sortDescriptors
{
    throw new NotImplementedException($_cmd);
}

//Sorts the receiver’s elements in ascending order as defined by the comparison function compare.
- (void)sortUsingFunction:(NSInteger /*(*)(id, id, void *)*/)compare context:(void *)context
{
    throw new NotImplementedException($_cmd);
}

//Sorts the receiver’s elements in ascending order, as determined by the comparison method specified by a given selector.
- (void)sortUsingSelector:(SEL)comparator
{
    throw new NotImplementedException($_cmd);
}

//Sorts the receiver using the specified options and the comparison method specified by a given NSComparator Block.
- (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr
{
    throw new NotImplementedException($_cmd);
}

@end

/*
MKSortDescriptor

//Returns a copy of the receiver sorted as specified by a given array of sort descriptors.
- (MKArray *)sortedArrayUsingDescriptors:(MKArray *)sortDescriptors
{
}
*/

/*
MKKeyValueCoding

Invokes setValue:forKey: on each of the receiver's items using the specified value and key.
- (void)setValue:(id)value forKey:(MKString *)key

Returns an array containing the results of invoking valueForKey: using key on each of the receiver's objects.
- (id)valueForKey:(MKString *)key
*/

/*
MKPathUtilities

Returns an array containing all the pathname elements in the receiver that have filename extensions from a given array.
- (MKArray *)pathsMatchingExtensions:(MKArray *)filterTypes
*/

/*
MKPredicate
//Evaluates a given predicate against each object in the receiver and returns a new array containing the objects for which the predicate returns true.
- (MKArray *)filteredArrayUsingPredicate:(MKPredicate *)predicate
{
}
*/

/*
MKKeyValueObserving.h

- (void)addObserver:(MKObject *)observer forKeyPath:(MKString *)keyPath options:(MKKeyValueObservingOptions)options context:(void *)context
- (void)addObserver:(MKObject *)anObserver toObjectsAtIndexes:(MKIndexSet *)indexes forKeyPath:(MKString *)keyPath options:(MKKeyValueObservingOptions)options
context:(void *)context

Raises an exception.
- (void)removeObserver:(MKObject *)observer forKeyPath:(MKString *)keyPath

Removes anObserver from all key value observer notifications associated with the specified keyPath relative to the receiver’s objects at indexes.
- (void)removeObserver:(MKObject *)anObserver fromObjectsAtIndexes:(MKIndexSet *)indexes forKeyPath:(MKString *)keyPath

*/

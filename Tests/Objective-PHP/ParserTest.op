<?php
// ./objphp compile Moka/Foundation/MKObject.op Moka/Foundation/MKException.op Tools/objphp/main.op Tools/objphp/CommandPlugins/test.op Tests/Objective-PHP/ParserTest.op -f -o=test.php

@implementation ParserTest : UnitTest

- (id)parserWithTokenizer
{
    return new \ObjPHP\Parser(new \ObjPHP\Tokenizer());
}

- (void)parser:(id)parser addCode:(string)code
{
    $parser->getTokens()->addTokensAndReset($code);
}

- (void)parser:(id)parser addCodeAndAssertNoThrow:(string)code message:(string)message
{
    $parser->getTokens()->addTokensAndReset($code);
    [$self assertDoesNotThrow:(function() use ($parser) {$parser->parse();}) message:$message];
}

- (void)parser:(id)parser addCodeAndAssertThrows:(string)code message:(string)message
{
    $parser->getTokens()->addTokensAndReset($code);
    [$self assertThrows:(function() use ($parser) {$parser->parse();}) message:$message];
}

- (void)testDefineClass
{
    $parser = [$self parserWithTokenizer];
    [$self parser:$parser addCodeAndAssertNoThrow:"<?php //hello
    @implementation TestEmptyClass
    @end" message:"Define new empty class without parent"];
    [$self parser:$parser addCodeAndAssertNoThrow:"<?php
    @implementation TestClassInLine @end" message:"Class defined in single line"];
    // syntax errors
    [$self parser:$parser addCodeAndAssertThrows:"<?php @implementation TestClassMissingEnd" message:"Missing @end"];
    [$self parser:$parser addCodeAndAssertThrows:"<?php @implementation @end" message:"Missing class name"];
    [$self parser:$parser addCodeAndAssertThrows:"<?php @implementation TestClass2 TestClass3 @end" message:"Whitespace in class name"];
}

- (void)testAlreadyDefinedClass
{
    $parser = [$self parserWithTokenizer];
    [$self parser:$parser addCodeAndAssertNoThrow:"<?php @implementation TestClassInLine @end" message:"Class defined in single line"];
    [$self parser:$parser addCodeAndAssertThrows:"<?php @implementation TestClassInLine @end" message:"Class name already defined"];
}

- (void)testDefineClassWithParent
{
    $parser = [$self parserWithTokenizer];
    [$self parser:$parser addCodeAndAssertNoThrow:"<?php @implementation TestClass @end" message:"Class defined in single line"];
    [$self parser:$parser addCodeAndAssertNoThrow:"
        <?php
        @implementation TestChild : TestClass
        @end" message:"Define new class with parent"];

    [$self parser:$parser addCodeAndAssertNoThrow:"
        <?php @implementation TestChildInLine : TestClass @end
    " message:"Define new class with parent in single line"];
}

- (void)testDefineClassWithImportedParent
{
    $parser = [$self parserWithTokenizer];
    [$self parser:$parser addCodeAndAssertNoThrow:"
        <?php
        @import <Foundation/MKObject.op>
        @implementation TestChild : MKObject
        @end" message:"Define new class with parent imported from Foundation of Moka"];
}

- (void)testDefineClassWithProtocolConform
{
    $parser = [$self parserWithTokenizer];
    [$self parser:$parser addCodeAndAssertNoThrow:"
        <?php
        @protocol TestProtocol
        - (void) anInstanceMethod:param1 withVar:param2;
        @end
        @implementation TestClassWithProtocol <TestProtocol>
        - (void)anInstanceMethod:variable1 withVar:variable2
        {
            return;
        }
        @end" message:"Define new class which obeys a protocol, TestProtocol"];

    // TODO: test combinations with invalid syntax
}

- (void)testDefineClassWithProtocolNonConformance
{
    $parser = [$self parserWithTokenizer];
    [$self parser:$parser addCodeAndAssertThrows:"
        <?php
        @protocol TestProtocol
        - (void) anInstanceMethod:param1 withVar:param2;
        @end
        @implementation TestClassWithProtocol <TestProtocol>
        - (void)anInstanceMethod:variable1 withVar:variable2 anotherVar:var
        {
            return;
        }
        @end" message:"Define new class which does not conform to a protocol, TestProtocol"];

    // TODO: test combinations with invalid syntax
}


- (void)testDefineClassWithParentWithProtocolConform
{
    $parser = [$self parserWithTokenizer];
    [$self parser:$parser addCodeAndAssertNoThrow:"
        <?php
        @implementation TestClassParent
        - (void)anotherInstanceMethod:variable1 { return; }
        @end
        @protocol TestProtocol
        - (void) anotherInstanceMethod:param1;
        @end
        @implementation TestClass : TestClassParent <TestProtocol>
        @end
        " message:"Define new class with parent which obeys a protocol, TestProtocol"];

    // TODO: test combinations with invalid syntax
}

- (void)testDefineClassWithProtocolInheritanceConforms
{
    $parser = [$self parserWithTokenizer];
    [$self parser:$parser addCodeAndAssertNoThrow:"
        <?php
        @protocol TestProtocolParent
        - (void) instanceMethod:param1;
        @end
        @protocol TestProtocol <TestProtocolParent>
        - (void) anotherInstanceMethod:param1;
        @end
        @implementation TestClassWithProtocol <TestProtocol>
        - (void)instanceMethod:variable1 { return; }
        - (void)anotherInstanceMethod:variable1 { return; }
        @end
        " message:"Define new class with protocol, TestProtocol, which has a parent protocol, TestProtocolParent"];
}

- (void)testDefineClassWithProtocolInheritanceNonConformance
{
    $parser = [$self parserWithTokenizer];
    [$self parser:$parser addCodeAndAssertThrows:"
        <?php
        @protocol TestProtocolParent
        - (void) instanceMethod:param1;
        @end
        @protocol TestProtocol <TestProtocolParent>
        - (void) anotherInstanceMethod:param1;
        @end
        @implementation TestClassWithProtocol <TestProtocol>
        - (void)instanceMethod:variable1 { return; }
        @end
        " message:"Define new class with protocol, TestProtocol, which has a parent protocol, TestProtocolParent and test throws on non conformance"];
}

- (void)testDefineClassWithParentWithProtocolInheritanceConformance
{
    $parser = [$self parserWithTokenizer];
    [$self parser:$parser addCodeAndAssertNoThrow:"
        <?php
        @implementation TestClassParent
        - (void) instanceMethod:param1 { return; }
        @end
        @protocol TestProtocolParent
        - (void) instanceMethod:param1;
        @end
        @protocol TestProtocol <TestProtocolParent>
        - (void) anotherInstanceMethod:param1;
        @end
        @implementation TestClassWithProtocol : TestClassParent <TestProtocol>
        - (void)anotherInstanceMethod:variable1 { return; }
        @end
        " message:"Define new class with parent with protocol, TestProtocol, which has a parent protocol, TestProtocolParent, and conformance is split over the inheritance tree."];
}

@end
